All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).


## [0.8.1] - 2024-12-22

### Changed

- Removed internal `etl::detail` namespace, as it was causing issues with `SourceCodeLocation`
  when using the RUNTIME_INFO macro.

## [0.8.0] - 2024-12-17

### Added
- New abstract class (etl::BaseError) for better and simpler error handling

- New type definition (etl::DynError) which is just a std::shared_ptr<BaseError>
  for more simple handling of Polymorphic errors and returning them up the function
  call chain.

- Unit tests for etl::DynError

### Changed

- Switch to using the optional's emplace method in Result.ok() and err() methods
  to improve return value optimization.

- SourceCodeLocation class is now in an internal `etl::detail` namespace. A user of the library is not
  meant to use it directly.

- Changed class member variable naming convention

- Changed east const usage to standard west const

- Cleaned up unit tests and examples.

- Updated and improved README examples and simple use cases



### Removed

- IError and Error classes, BaseError replaced both.


## [0.5.0] - 2023-06-25

### Added
- Cmake installation files have been re-worked based on nlohmann_json cmake
  so they work properly when find_package(etl VERSION REQUIRED) is used

- Package Config support added so other build systems can find and use etl easily.

### Changed

- Comment style has been changed from the cumbersom /**/ to ///

- Comment descriptions have also been fixed and updated

## [0.1.0] - 2023-05-26

### Added

- Initial "stable version" of the library released.

### Limitations

- The Result template specialzation for std::unique_ptr<OkType> does not support
  the `map(f)` or `mapErr(f)` methods, because I can't quite figure out how to make lambdas
  invokable on move only types like unique_ptr. The functionality is not really needed anyways,
  but maybe added in the future.

- The EnumerationIterable class can only handle contiguous Enum classes. e.g 1, 2, 3, 4....
  If your enum class has gaps in the sequence the iteration will fail. This should be fixed in the future,
  as it would be nice to iterate any trivial enum contiguous or not.

- When using the Result `mapErr()` method on `Error`, the paramater must not be a reference or const reference
  as the lambda won't be invokable, it must be passed as a copyable object, since it is converted into a const reference
  in the actual std::invoke call. Otherwise it will not run.

